# -*- coding: utf-8 -*-
"""Tic-Tac-Toe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-gbAFU-TUG0uWIo8pFT2PM_rsspqtOPf
"""

import math
from copy import deepcopy

X = "X"
O = "O"
EMPTY = None

def initial_state():
    """
    Returns starting state of the board.
    """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

def player(board):
    """Returns player who has the next turn on a board."""
    x_count = sum(row.count('X') for row in board)
    o_count = sum(row.count('O') for row in board)
    return 'X' if x_count == o_count else 'O'

def actions(board):
    """Returns set of all possible actions (i, j) available on the board."""
    possible_actions = set()
    for i in range(3):
        for j in range(3):
            if board[i][j] is None:
                possible_actions.add((i, j))
    return possible_actions

def result(board, action):
    """
    Returns the board results from making move (i, j) on the board.
    """
    i, j = action
    if (board[i][j] is not EMPTY):
        raise ValueError

    new_board = deepcopy(board)
    new_board[i][j] = player(board)

    return new_board

def winner(board):
    """Returns the winner of the game, if there is one."""
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] and row[0] is not None:
            return row[0]
    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] is not None:
            return board[0][col]
    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] is not None:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] is not None:
        return board[0][2]
    # No winner
    return None

def terminal(board):
    """
    Returns True if game is over, False otherwise.
    """
    if (winner(board) is not None):
        return True

    return non_free_cells(board) == 9

def utility(board):
    """
    Given a terminal board, returns 1 if X has won the game, -1 if O has won, 0 otherwise.
    """
    if (not terminal(board)):
        raise ValueError

    winner_player = winner(board)
    if (winner_player == X): return 1
    if (winner_player == O): return -1
    if (winner_player == None): return 0

def minimax(board):
    """Returns the optimal move for the current player on the board."""
    if terminal(board):
        return None
    current_player = player(board)
    if current_player == 'X':
        best_move = None
        best_score = -math.inf
        for action in actions(board):
            score = min_value(result(board, action))
            if score > best_score:
                best_score = score
                best_move = action
        return best_move
    else:  # current_player == 'O'
        best_move = None
        best_score = math.inf
        for action in actions(board):
            score = max_value(result(board, action))
            if score < best_score:
                best_score = score
                best_move = action
        return best_move

def max_value(board):
    """Returns the maximum value of a board."""
    if terminal(board):
        return utility(board)
    v = -math.inf
    for action in actions(board):
        v = max(v, min_value(result(board, action)))
    return v

def min_value(board):
    """Returns the minimum value of a board."""
    if terminal(board):
        return utility(board)
    v = math.inf
    for action in actions(board):
        v = min(v, max_value(result(board, action)))
    return v

min_value_memo = {}
def min_value(board):
    """
    Current player: O.
    """
    if terminal(board):
        return utility(board)

    memo_key = repr(board)
    if memo_key in min_value_memo:
        return min_value_memo[memo_key]

    v = math.inf
    for action in actions(board):
        v = min(v, max_value(result(board, action)))

    min_value_memo[memo_key] = v
    return v

max_value_memo = {}
def max_value(board):
    """
    Current player: X.
    """
    if terminal(board):
        return utility(board)

    memo_key = repr(board)
    if memo_key in max_value_memo:
        return max_value_memo[memo_key]

    v = -math.inf
    for action in actions(board):
        v = max(v, min_value(result(board, action)))

    max_value_memo[memo_key] = v
    return v

def non_free_cells(board):
    """
    Returns the quantity of non empty cells on board.
    """
    count = 0

    for i in range(len(board)):
        for j in range((len(board[0]))):
            if board[i][j] is not EMPTY:
                count += 1

    return count